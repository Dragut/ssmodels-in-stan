[
["example-models-1.html", "Chapter 6 Example Models 6.1 Nile", " Chapter 6 Example Models 6.1 Nile This is a short (\\(n = 100\\)) univariate time series of the annual flow volumes of the Nile River at Aswan between 1871 and 1970. This series is described in Durbin and Koopman (2012) and had been analyzed by Cobb (1978) and Balke (1993), and in numerous time series textbooks. A notable feature of the series is a seeming structural break in 1899, around the time of the completion of the Aswan dam. data(&quot;Nile&quot;, package = &quot;datasets&quot;) Nile_ &lt;- data_frame(year = year(as.Date(Nile)), flow = as.numeric(Nile), obs = seq_along(Nile)) ggplot(Nile_, aes(x = year, y = flow)) + geom_point() + geom_line() + ylab(&quot;Annual Flow&quot;) + xlab(&quot;&quot;) 6.1.1 Local Level Model The Nile data can be modeled as a local level model, \\[ \\begin{aligned}[t] y_t &amp;= \\mu_t + \\varepsilon_t &amp; \\varepsilon_t &amp; \\sim N(0, \\sigma_{\\varepsilon}^2) \\\\ \\mu_{t + 1} &amp;= \\mu_t + \\eta_t &amp; \\eta_t &amp; \\sim N(0, \\sigma^2_{\\eta}) \\end{aligned} \\] functions { #include ssm.stan } data { int&lt;lower = 1&gt; n; vector[1] y[n]; vector&lt;lower = 0.0&gt;[1] a1; cov_matrix[1] P1; real&lt;lower = 0.0&gt; y_scale; } transformed data { // system matrices matrix[1, 1] T; matrix[1, 1] Z; matrix[1, 1] R; vector[1] c; vector[1] d; int m; int p; int q; int filter_sz; m = 1; p = 1; q = 1; T[1, 1] = 1.0; Z[1, 1] = 1.0; R[1, 1] = 1.0; c[1] = 0.0; d[1] = 0.0; filter_sz = ssm_filter_size(m, p); } parameters { real&lt;lower = 0.0&gt; sigma_eta; real&lt;lower = 0.0&gt; sigma_epsilon; } transformed parameters { matrix[1, 1] H; matrix[1, 1] Q; H[1, 1] = pow(sigma_epsilon, 2); Q[1, 1] = pow(sigma_eta * sigma_epsilon, 2); } model { y ~ ssm_constant_lpdf(d, Z, H, c, T, R, Q, a1, P1); sigma_epsilon ~ cauchy(0.0, y_scale); sigma_eta ~ cauchy(0.0, 1.0); } generated quantities { vector[filter_sz] filtered[n]; vector[1] alpha[n]; vector[1] eta[n]; vector[1] eps[n]; // filtering filtered = ssm_filter(y, rep_array(d, 1), rep_array(Z, 1), rep_array(H, 1), rep_array(c, 1), rep_array(T, 1), rep_array(R, 1), rep_array(Q, 1), a1, P1); // sampling states alpha = ssm_simsmo_states_rng(filtered, rep_array(d, 1), rep_array(Z, 1), rep_array(H, 1), rep_array(c, 1), rep_array(T, 1), rep_array(R, 1), rep_array(Q, 1), a1, P1); eps = ssm_simsmo_eps_rng(filtered, rep_array(d, 1), rep_array(Z, 1), rep_array(H, 1), rep_array(c, 1), rep_array(T, 1), rep_array(R, 1), rep_array(Q, 1), a1, P1); eta = ssm_simsmo_eta_rng(filtered, rep_array(d, 1), rep_array(Z, 1), rep_array(H, 1), rep_array(c, 1), rep_array(T, 1), rep_array(R, 1), rep_array(Q, 1), a1, P1); } local_level_mod &lt;- ssm_stan_model(&quot;local_level.stan&quot;) nile_1_data &lt;- within(list(), { y &lt;- matrix(Nile_$flow) n &lt;- nrow(y) a1 &lt;- array(0, 1) P1 &lt;- matrix(10 ^ 7) y_scale &lt;- sd(Nile_$flow) }) nile_1_samples &lt;- sampling(local_level_mod, chains = 1, iter = 500, data = nile_1_data) #&gt; #&gt; SAMPLING FOR MODEL &#39;local_level&#39; NOW (CHAIN 1). #&gt; #&gt; Chain 1, Iteration: 1 / 500 [ 0%] (Warmup) #&gt; Chain 1, Iteration: 50 / 500 [ 10%] (Warmup) #&gt; Chain 1, Iteration: 100 / 500 [ 20%] (Warmup) #&gt; Chain 1, Iteration: 150 / 500 [ 30%] (Warmup) #&gt; Chain 1, Iteration: 200 / 500 [ 40%] (Warmup) #&gt; Chain 1, Iteration: 250 / 500 [ 50%] (Warmup) #&gt; Chain 1, Iteration: 251 / 500 [ 50%] (Sampling) #&gt; Chain 1, Iteration: 300 / 500 [ 60%] (Sampling) #&gt; Chain 1, Iteration: 350 / 500 [ 70%] (Sampling) #&gt; Chain 1, Iteration: 400 / 500 [ 80%] (Sampling) #&gt; Chain 1, Iteration: 450 / 500 [ 90%] (Sampling) #&gt; Chain 1, Iteration: 500 / 500 [100%] (Sampling) #&gt; Elapsed Time: 5.56571 seconds (Warm-up) #&gt; 5.32206 seconds (Sampling) #&gt; 10.8878 seconds (Total) Now, summarize the MCMC samples using the summary function on the stanfit object. Additionally, I use the tidy_stan_summary function to make the results of summary easier to work with. This converts the results of summary from a list of matrices to a list of data frames, and also parses the parameter names so that it is easier to select particular parameter values by name. I also will only use only the summary statistics for the combined chains. nile_1_summary &lt;- tidy_stan_summary(summary(nile_1_samples))[[&quot;all&quot;]] %&gt;% left_join(Nile_, by = c(&quot;dim_1&quot; = &quot;obs&quot;)) The estimated variances of the observation and state variances, filter(nile_1_summary, parameter %in% c(&quot;H&quot;, &quot;Q&quot;)) %&gt;% select(parname, mean, se_mean, p2.5, p97.5, n_eff, Rhat) #&gt; # A tibble: 2 x 7 #&gt; parname mean se_mean p2.5 p97.5 n_eff Rhat #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 H[1,1] 14096 350 8517 19898 77.7 0.996 #&gt; 2 Q[1,1] 2502 233 425 6828 61.5 0.996 are similar to the MLE estimates producted by StructTS, StructTS(Nile_$flow, type = &quot;level&quot;) #&gt; #&gt; Call: #&gt; StructTS(x = Nile_$flow, type = &quot;level&quot;) #&gt; #&gt; Variances: #&gt; level epsilon #&gt; 1469 15099 However, since the Bayesian estimates are means, the MLE estimates are modes, and the posterior distribution of the variances are right skewed, the means are larger than the posterior modes. str_keep &lt;- function(string, pattern) { string[str_detect(string, pattern)] } ggplot(filter(nile_1_summary, parameter == &quot;alpha&quot;), aes(x = year, ymin = mean - 2 * sd, ymax = mean + 2 * sd)) + geom_ribbon(alpha = 0.3) + geom_line(aes(y = mean)) + geom_point(aes(y = flow)) + ylab(&quot;Annual river flow&quot;) + xlab(&quot;Observation&quot;) + theme_minimal() ggplot(filter(nile_1_summary, parameter == &quot;eta&quot;), aes(x = year, y = mean, ymin = mean - 2 * sd, ymax = mean + 2 * sd)) + geom_pointrange() ggplot(filter(nile_1_summary, parameter == &quot;eps&quot;), aes(x = year, y = mean, ymin = mean - 2 * sd, ymax = mean + 2 * sd)) + geom_pointrange() TODO Diagnostics. What are the relevant Bayesian analogs? 6.1.2 Local level with known intervention (intercept) nile_2_mod &lt;- ssm_stan_model(&quot;local_level_reg.stan&quot;) nile_2_data &lt;- nile_1_data nile_2_data[[&quot;x&quot;]] &lt;- matrix(as.integer(Nile_$year &gt; 1899)) nile_2_data[[&quot;k&quot;]] &lt;- ncol(nile_2_data[[&quot;x&quot;]]) nile_2_samples &lt;- sampling(nile_2_mod, chains = 1, iter = 500, data = nile_2_data) nile_2_summary &lt;- tidy_stan_summary(summary(nile_2_samples))[[&quot;all&quot;]] %&gt;% left_join(Nile_, by = c(&quot;dim_1&quot; = &quot;obs&quot;)) ggplot(filter(nile_2_summary, parameter == &quot;mu&quot;), aes(x = year, ymin = mean - 2 * sd, ymax = mean + 2 * sd)) + geom_ribbon(alpha = 0.3) + geom_line(aes(y = mean)) + geom_point(aes(y = flow)) + ylab(&quot;Annual river flow&quot;) + xlab(&quot;Observation&quot;) + theme_minimal() 6.1.3 Local Level with known intervention (variance) nile_3_mod &lt;- ssm_stan_model(&quot;local_level_interven.stan&quot;) nile_3_data &lt;- nile_1_data nile_3_data[[&quot;s&quot;]] &lt;- ifelse(Nile_$year == 1899, 10, 1) nile_3_samples &lt;- sampling(nile_3_mod, chains = 1, iter = 500, data = nile_3_data) nile_3_summary &lt;- tidy_stan_summary(summary(nile_3_samples))[[&quot;all&quot;]] %&gt;% left_join(Nile_, by = c(&quot;dim_1&quot; = &quot;obs&quot;)) ggplot(filter(nile_3_summary, parameter == &quot;alpha&quot;), aes(x = year, ymin = mean - 2 * sd, ymax = mean + 2 * sd)) + geom_ribbon(alpha = 0.3) + geom_line(aes(y = mean)) + geom_point(aes(y = flow)) + ylab(&quot;Annual river flow&quot;) + xlab(&quot;Observation&quot;) + theme_minimal() 6.1.4 Local Level model with Sparse State Disturbances nile_4_mod &lt;- ssm_stan_model(&quot;local_level_tvvar.stan&quot;) nile_4_data &lt;- nile_1_data nile_4_data[[&quot;s&quot;]] &lt;- 1 / nrow(Nile_) nile_4_samples &lt;- sampling(nile_4_mod, chains = 1, iter = 500, data = nile_4_data) nile_4_summary &lt;- tidy_stan_summary(summary(nile_4_samples))[[&quot;all&quot;]] %&gt;% left_join(Nile_, by = c(&quot;dim_1&quot; = &quot;obs&quot;)) ggplot(filter(nile_4_summary, parameter == &quot;alpha&quot;), aes(x = year, ymin = mean - 2 * sd, ymax = mean + 2 * sd)) + geom_ribbon(alpha = 0.3) + geom_line(aes(y = mean)) + geom_point(aes(y = flow)) + ylab(&quot;Annual river flow&quot;) + xlab(&quot;Observation&quot;) + theme_minimal() Other Software "]
]
